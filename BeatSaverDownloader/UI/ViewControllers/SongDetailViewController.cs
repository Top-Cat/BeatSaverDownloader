using BeatSaberMarkupLanguage.Attributes;
using HMUI;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Linq;
using System.Threading.Tasks;
using BeatSaverDownloader.Misc;
using BeatSaverDownloader.UI.ViewControllers.SongDetail;
using BeatSaverSharp.Models;
using IPA.Utilities;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

namespace BeatSaverDownloader.UI.ViewControllers
{
    public class SongDetailViewController : BeatSaberMarkupLanguage.ViewControllers.BSMLResourceViewController
    {
        public override string ResourceName => "BeatSaverDownloader.UI.BSML.songDetail.bsml";

        private GameObject _levelDetails;
        private bool _detailViewSetup;
        private Beatmap _currentSong;

        private BeatmapDifficultySegmentedControlController _difficultiesSegmentedControllerClone;
        private BeatmapCharacteristicSegmentedControlController _characteristicSegmentedControllerClone;
        private TextSegmentedControl _diffSegmentedControl;
        private IconSegmentedControl _characteristicSegmentedControl;

        private BeatmapDifficulty.BeatmapCharacteristic _selectedCharacteristic;
        private BeatmapDifficulty[] _currentDifficulties;

        private TextMeshProUGUI _songNameText;
        private ImageView _coverImage;

        private TextMeshProUGUI _songSubText;
        private CurvedTextMeshPro _npsText;
        private CurvedTextMeshPro _notesText;
        private CurvedTextMeshPro _obstaclesText;
        private CurvedTextMeshPro _bombsText;
        private CurvedTextMeshPro _upText;
        private CurvedTextMeshPro _downText;
        private bool _downloadInteractable = false;

        public Action<Beatmap, Sprite> DidPressDownload;
        public Action<User> DidPressUploader;
        public Action<string> SetDescription;

        private bool _showAutoGeneratedText = false;
        [UIValue("show-auto-generated-text")]
        public bool ShowAutoGeneratedText
        {
            get => _showAutoGeneratedText;
            set
            {
                _showAutoGeneratedText = value;
                NotifyPropertyChanged();
            }
        }

        [UIValue("downloadInteractable")]
        public bool DownloadInteractable
        {
            get => _downloadInteractable;
            set
            {
                _downloadInteractable = value;
                NotifyPropertyChanged();
            }
        }
        private bool _uploaderInteractable = true;
        [UIValue("uploaderInteractable")]
        public bool UploaderInteractable
        {
            get => _uploaderInteractable;
            set
            {
                _uploaderInteractable = value;
                NotifyPropertyChanged();
            }
        }
        [UIAction("#post-parse")]
        internal void Setup()
        {
            if (transform is RectTransform rt)
            {
                rt.sizeDelta = new Vector2(70, 0);
                rt.anchorMin = new Vector2(0.5f, 0);
                rt.anchorMax = new Vector2(0.5f, 1);
            }

            SetupDetailView();
        }

        [UIAction("downloadPressed")]
        internal void DownloadPressed()
        {
            DidPressDownload?.Invoke(_currentSong, _coverImage.sprite);
            DownloadInteractable = false;
        }
        [UIAction("uploaderPressed")]
        internal void UploaderPressed()
        {
            DidPressUploader?.Invoke(_currentSong.Uploader);
        }

        internal void ClearData()
        {
            if (!_detailViewSetup) return;

            _npsText.text = "--";
            _notesText.text = "--";
            _obstaclesText.text = "--";
            _bombsText.text = "--";
            _upText.text = "--";
            _downText.text = "--";
            _songNameText.text = "--";
            _songSubText.text = "--";
            _coverImage.sprite = Misc.Sprites.LoadSpriteFromTexture(Texture2D.blackTexture);
            _diffSegmentedControl.SetTexts(new string[] { });
            _characteristicSegmentedControl.SetData(new IconSegmentedControl.DataItem[] { });
            DownloadInteractable = false;
            UploaderInteractable = false;
            ShowAutoGeneratedText = false;
            PluginUI.SongPreviewPlayer.CrossfadeToDefault();
        }

        internal async void Initialize(StrongBox<Beatmap> song, Sprite cover, Task<AudioClip> clip)
        {
            _currentSong = song.Value;

            _songNameText.text = _currentSong.Metadata.SongName;
            if (cover != null)
                _coverImage.sprite = cover;
            UpdateDownloadButtonStatus();
            SetupCharacteristicDisplay();
            // new beatsaversharp has no characteristics. gotta make do
            var possibleCharacteristics = GetSelectedSongCharacteristics();
            if (possibleCharacteristics.Contains(BeatmapDifficulty.BeatmapCharacteristic.Standard)) SelectedCharacteristic(BeatmapDifficulty.BeatmapCharacteristic.Standard);
            else SelectedCharacteristic(possibleCharacteristics[0]);
            UploaderInteractable = true;
            ShowAutoGeneratedText = _currentSong.Automapper;
            SetDescription?.Invoke(_currentSong.Description);

            // Load song preview
            var preview = await clip;

            // Time may have passed
            if (_currentSong == song.Value)
                PluginUI.SongPreviewPlayer.CrossfadeTo(preview, 1f, 0f, 10f, () => { });
        }

        internal void UpdateDownloadButtonStatus()
        {
            DownloadInteractable = !SongDownloader.IsSongDownloaded(_currentSong.LatestVersion.Hash);
        }

        private BeatmapDifficulty.BeatmapCharacteristic[] GetSelectedSongCharacteristics()
        {
            return _currentSong != null ?
                _currentSong.LatestVersion.Difficulties.Select(x => x.Characteristic).Distinct().ToArray() :
                new[] { BeatmapDifficulty.BeatmapCharacteristic.Standard };
        }

        private void SetupDetailView()
        {
            _levelDetails = Instantiate(PluginUI.LevelDetailClone, gameObject.transform);
            _levelDetails.gameObject.SetActive(false);

            _characteristicSegmentedControllerClone = _levelDetails.GetComponentInChildren<BeatmapCharacteristicSegmentedControlController>();
            _characteristicSegmentedControl = Util.CreateIconSegmentedControl(_characteristicSegmentedControllerClone.transform as RectTransform, new Vector2(0, 0), new Vector2(0, 0),
                delegate (int value) { SelectedCharacteristic(GetSelectedSongCharacteristics()[value]); });

            _difficultiesSegmentedControllerClone = _levelDetails.GetComponentInChildren<BeatmapDifficultySegmentedControlController>();
            _diffSegmentedControl = Util.CreateTextSegmentedControl(_difficultiesSegmentedControllerClone.transform as RectTransform, new Vector2(0, 0), new Vector2(0, 0),
                delegate (int value) { SelectedDifficulty(_currentDifficulties[value]); }, 3.5f, 1);

            var levelBar = _levelDetails.GetComponentInChildren<LevelBar>();
            levelBar.GetField<GameObject, LevelBar>("_singleLineSongInfoContainer").SetActive(true);
            levelBar.GetField<GameObject, LevelBar>("_multiLineSongInfoContainer").SetActive(false);
            _songNameText = levelBar.GetField<TextMeshProUGUI, LevelBar>("_songNameText");
            _songSubText = levelBar.GetField<TextMeshProUGUI, LevelBar>("_authorNameText");
            _coverImage = levelBar.GetField<ImageView, LevelBar>("_songArtworkImageView");

            _songSubText.overflowMode = TextOverflowModes.Overflow;
            _songSubText.enableWordWrapping = false;

            _npsText = _levelDetails.GetComponentsInChildren<CurvedTextMeshPro>().First(x => x.gameObject.transform.parent.name == "NPS");
            _notesText = _levelDetails.GetComponentsInChildren<CurvedTextMeshPro>().First(x => x.gameObject.transform.parent.name == "NotesCount");
            _obstaclesText = _levelDetails.GetComponentsInChildren<CurvedTextMeshPro>().First(x => x.gameObject.transform.parent.name == "ObstaclesCount");
            _bombsText = _levelDetails.GetComponentsInChildren<CurvedTextMeshPro>().First(x => x.gameObject.transform.parent.name == "BombsCount");

            CreateVoteDisplay();
            _songSubText.text = "--";
            _npsText.text = "--";
            _notesText.text = "--";
            _obstaclesText.text = "--";
            _bombsText.text = "--";
            _songNameText.text = "--";
            _upText.text = "--";
            _downText.text = "--";
            _detailViewSetup = true;
            _levelDetails.gameObject.SetActive(true);
        }

        private void CreateVoteDisplay()
        {
            var bombsDisplay = _levelDetails.transform.Find("BeatmapParamsPanel").Find("BombsCount");
            var layout = bombsDisplay.parent.gameObject.AddComponent<HorizontalLayoutGroup>();

            var upDisplay = Instantiate(bombsDisplay, _bombsText.transform.parent.parent);
            upDisplay.gameObject.name = "UpVotesCount";
            upDisplay.GetComponentInChildren<ImageView>().sprite = Sprites.ThumbUp;
            _upText = upDisplay.GetComponentInChildren<CurvedTextMeshPro>();

            var downDisplay = Instantiate(bombsDisplay, _bombsText.transform.parent.parent);
            downDisplay.gameObject.name = "DownVotesCount";
            downDisplay.GetComponentInChildren<ImageView>().sprite = Sprites.ThumbDown;
            _downText = downDisplay.GetComponentInChildren<CurvedTextMeshPro>();
        }

        public void SelectedDifficulty(BeatmapDifficulty difficulty)
        {
            _songSubText.text = $"{_currentSong.Metadata.BPM.ToString()} BPM   " + $"{Math.Floor((double)_currentSong.Metadata.Duration / 60):N0}:{Math.Floor((double)_currentSong.Metadata.Duration % 60):00}";
            _npsText.text = difficulty.NPS.ToString("F2");
            _notesText.text = difficulty.Notes.ToString();
            _obstaclesText.text = difficulty.Obstacles.ToString();
            _bombsText.text = difficulty.Bombs.ToString();
            _upText.text = _currentSong.Stats.Upvotes.ToString();
            _downText.text = _currentSong.Stats.Downvotes.ToString();
        }

        public void SelectedCharacteristic(BeatmapDifficulty.BeatmapCharacteristic characteristic)
        {
            _selectedCharacteristic = characteristic;
            if (_diffSegmentedControl != null)
                SetupDifficultyDisplay();
        }

        private void SetupDifficultyDisplay()
        {
            var diffs = _currentDifficulties = _currentSong.LatestVersion.Difficulties
                .Where(x => x.Characteristic == _selectedCharacteristic)
                .ToArray();
            var diffNames = diffs
                .Select(x => x.Difficulty)
                .OrderBy(x => (int) x)
                .Select(x => _difficultyNameLookup.TryGetValue(x, out var outVal) ? outVal : "--")
                .ToArray();

            _diffSegmentedControl.SetTexts(diffNames.ToArray());
            foreach (var text in _diffSegmentedControl.GetComponentsInChildren<TextMeshProUGUI>())
                text.enableWordWrapping = false;

            if (diffs.Any())
                _diffSegmentedControl.SelectCellWithNumber(0);

            if (_currentDifficulties != null)
                SelectedDifficulty(_currentDifficulties[0]);
        }

        private void SetupCharacteristicDisplay()
        {
            var possibleCharacteristics = GetSelectedSongCharacteristics();
            var characteristics = new List<IconSegmentedControl.DataItem>();
            foreach (var possibleChar in possibleCharacteristics)
            {
                var c = possibleChar.ToString();
                if (c.StartsWith("_")) c = c.Substring(1);
                var characteristic = SongCore.Loader.beatmapCharacteristicCollection.GetBeatmapCharacteristicBySerializedName(c);
                characteristics.Add(
                    new IconSegmentedControl.DataItem(
                        characteristic.icon,
                        characteristic.characteristicNameLocalizationKey == "Missing Characteristic"
                            ? $"Missing Characteristic: {c}"
                            : Polyglot.Localization.Get(characteristic.descriptionLocalizationKey)
                    )
                );
            }

            _characteristicSegmentedControl.SetData(characteristics.ToArray());
        }

        readonly Dictionary<BeatmapDifficulty.BeatSaverBeatmapDifficulty, string> _difficultyNameLookup =
            new Dictionary<BeatmapDifficulty.BeatSaverBeatmapDifficulty, string>
        {
            { BeatmapDifficulty.BeatSaverBeatmapDifficulty.Easy, "Easy" },
            { BeatmapDifficulty.BeatSaverBeatmapDifficulty.Normal, "Normal" },
            { BeatmapDifficulty.BeatSaverBeatmapDifficulty.Hard, "Hard" },
            { BeatmapDifficulty.BeatSaverBeatmapDifficulty.Expert, "Expert" },
            { BeatmapDifficulty.BeatSaverBeatmapDifficulty.ExpertPlus, "Expert+" }
        };
    }
}